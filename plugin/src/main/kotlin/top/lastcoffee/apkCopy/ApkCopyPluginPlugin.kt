/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package top.lastcoffee.apkCopy

import com.android.build.VariantOutput
import com.android.build.api.artifact.SingleArtifact
import com.android.build.api.variant.AndroidComponentsExtension
import com.android.build.api.variant.ApplicationAndroidComponentsExtension
import com.android.build.gradle.internal.dsl.BaseAppModuleExtension
import com.android.tools.r8.internal.it
import okio.buffer
import okio.sink
import okio.source
import org.gradle.api.Plugin
import org.gradle.api.Project
import java.io.File

/**
 * A simple 'hello world' plugin.
 */
class ApkCopyPluginPlugin : Plugin<Project> {
    override fun apply(project: Project) {
        // Register a task
        println("执行完毕了，获取extensions")
        val byType = project.extensions.getByType(ApplicationAndroidComponentsExtension::class.java)




        byType.onVariants {
            println("执行完毕了，执行onVariants001")

            project.tasks.register("replaceManifest${it.name}") { task ->
                task.group = "MyApkPlugin"

                val mManifestFile =
                    it.artifacts.get(SingleArtifact.MERGED_MANIFEST).get()
                println("文件输出结果")
                println(mManifestFile.asFile.readText())
            }
        }

            byType.onVariants() {
                println("执行完毕了，执行onVariants")
                project.tasks.register("greeting${it.name}") { task ->
                    task.group = "MyApkPlugin"
                    try {
                        val mReleaseApkDirectory = it.artifacts.get(SingleArtifact.APK)
                            .get().asFileTree.single { single -> single.name.contains("app") }
                        val mApkVersion = it.outputs[0].versionName.get()
                        println("执行完毕了，获取一下地址:${mReleaseApkDirectory}")
                        task.dependsOn("assemble${it.name.replaceFirstChar { char -> char.uppercase() }}")
                            .doLast { newTask ->
                                if (mReleaseApkDirectory.exists()) {
                                    File("D:\\ApkFileSave\\${it.name}").mkdirs()
                                    val outPutFile = File(
                                        "D:\\ApkFileSave\\${it.name}",
                                        "hunlihu-${mApkVersion}-${it.name}版.apk"
                                    )
                                    if (outPutFile.exists())
                                        outPutFile.delete()
                                    outPutFile.createNewFile()
                                    val buffer = outPutFile.sink().buffer()
                                    buffer.writeAll(mReleaseApkDirectory.source())
                                    buffer.flush()
                                    println("复制成功")
                                } else {
                                    println("${it.name}文件不存在")
                                }
                            }
                    } catch (e: Exception) {
                        println("执行报错了，原因是:${e.cause}")

                    }
                    println("执行完毕了，查看一下时机001")
                }
            }

        }
    }
